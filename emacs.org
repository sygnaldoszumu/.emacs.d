#+title:  My Emacs Configuration
#+author: Krystian Okaz
* Emacs Settings
** Default coding system
   #+begin_src emacs-lisp
     (set-default-coding-systems 'utf-8)
   #+end_src
** Usability
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit) ;; ESC as quit key
  (setq create-lockfiles nil) ;; Don't create lock files
  (winner-mode 1) ;; Winner  mode, undo window  configuration  changes
  (electric-pair-mode 1) ;; Global electric  pair  mode
#+end_src
** Autosave Directory
#+begin_src emacs-lisp
  (setq auto-save-file-name-transforms
	    `((".*" ,(concat user-emacs-directory "auto-save/") t))) 
#+end_src
** UI
 #+begin_src emacs-lisp
   (global-hl-line-mode 1) ;; Highlights current line
   (global-visual-line-mode) ;; Visual Line Everywhere
   (blink-cursor-mode 1) ;; Enable Blinking Cursor
   (column-number-mode) ;; Display Column Number in StatusBar
   (global-display-line-numbers-mode 1) ;; Display linenumbers globaly
   (dolist (mode '(org-mode-hook   ;; Disable line numbers for some modes
		   term-mode-hook
		   shell-mode-hook
		   treemacs-mode-hook
		   eshell-mode-hook))
     (add-hook mode (lambda () (display-line-numbers-mode 0)
		      )
	       )
     )
 #+end_src
** Fonts
   #+begin_src emacs-lisp
     (set-face-attribute 'org-block-begin-line nil :font "file-icons" :height 120)
     (set-face-attribute 'org-block-end-line nil :font "file-icons" :height 120)
     (set-face-attribute 'default nil :font "Open Sans" :height 120)
     ;; Set the fixed pitch face
     (set-face-attribute 'fixed-pitch nil :font "JetBrainsMono" :height 120)
     ;; Set the variable pitch face
     (set-face-attribute 'variable-pitch nil :font "Open Sans Light" :height 120  :weight 'regular)
   #+end_src
** Rainbow Delimiters - Color maching parenthesis
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode) ;;prog-mode is a default programing mode for all languages
    )
#+end_src
** Disable Menus and tooltips
   #+begin_src emacs-lisp
     (menu-bar-mode -1) ;; Disable the menu bar
     (toggle-scroll-bar -1) ;; Disable the scrollbar
     (tool-bar-mode -1) ;; Disable the tool bar
     (tooltip-mode -1) ;; Disable tooltips
   #+end_src
* No littering
   #+begin_src emacs-lisp
     ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
     ;; reliably, set `user-emacs-directory` before loading no-littering!
     (setq user-emacs-directory "~/.cache/emacs")
     
     (use-package no-littering)
     
     ;; no-littering doesn't set this by default so we must place
     ;; auto save files in the same path as it uses for sessions
     (setq auto-save-file-name-transforms
	   `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
   #+end_src
* General 
#+begin_src emacs-lisp
  (use-package general
    :after which-key
    :config
    (general-override-mode 1)
  
    (general-create-definer tyrant-def
      :states '(normal visual insert m
		       otion emacs)
      :prefix "SPC"
      :non-normal-prefix "C-SPC")
  
    (general-define-key
     :keymaps 'key-translation-map
     "ESC" (kbd "C-g"))
  
    (general-def
      ;; copy paste
      "S-C-x" 'kill-region
      "S-C-c" 'kill-ring-save
      "S-C-v" 'yank
      ;; Window navigation
      "S-C-h"  'windmove-left
      "S-C-j"  'windmove-down
      "S-C-k"  'windmove-up
      "S-C-l"  'windmove-right
      )
  
    (tyrant-def
      ""  nil
      "'" (general-simulate-key "C-c '")
      "," (general-simulate-key "C-c C-,")
      "c" (general-simulate-key "C-c C-c")
      "k" (general-simulate-key "C-c C-k")
      "h"  (general-simulate-key "C-h")
      "u"  (general-simulate-key "C-u")
      "x"  (general-simulate-key "C-x")
      "e"  (general-simulate-key "C-x C-e")
      "t"  (general-simulate-key "C-c C-t")
      ;; Quit operations
      "q"  '(:ignore t :which-key "quit emacs")
      "qq"  'kill-emacs
      "qz"  'delete-frame
      ;; Buffer operations
      "b"  '(:ignore t :which-key "buffer")
      "bb"  'ivy-switch-buffer
      "bo"  'mode-line-other-buffer
      "bd"  'kill-this-buffer
      "bj"  'next-buffer
      "bk"  'previous-buffer
      "bq"  'kill-buffer-and-window
      "bR"  'revert-buffer
      "br"  'rename-file-and-buffer
      "be"  'eval-buffer
      ;; Window operations
      "w"  '(:ignore t :which-key "window")
      "wh"  'windmove-left
      "wj"  'windmove-down
      "wk"  'windmove-up
      "wl"  'windmove-right
      "wm"  'maximize-window
      "wb"  'split-window-horizontally
      "wv"  'split-window-vertically
      "wm"  'maximize-window
      "wu"  'winner-undo
      "wo"  'other-window
      "wd"  'delete-window
      "wD"  'delete-other-windows
      ;; File operations
      "f"  '(:ignore t :which-key "files")
      "fc"  'write-file
      "fj"  'dired-jump
      "fl"  'find-file-literally
      "fr"  'rename-file-and-buffer
      "fR"  'recover-this-file
      "s"   'save-buffer
      ;; Applications
      "a"  '(:ignore t :which-key "Applications")
      "ad" 'dired
      "ac" 'calendar
      "ag"  'magit
      "g"  'magit
      ":"  'shell-command
      ;; Org-Mode
      "o"  '(:ignore t :which-key "Org Mode")
      "oa" 'org-agenda
      "oc" 'org-capture
      "ol" 'org-store-link
      "od" 'org-deadline
      "os" 'org-schedule
      "op" 'org-set-property
      "ot" 'org-todo
      "oq" 'org-archive-subtree
      "or" 'org-refile
      "on" 'org-add-note
      "o;"  '(:ignore t :which-key "Org Clock")
      "o;i" 'org-clock-in
      "o;o" 'org-clock-out
      "o;d" 'org-clock-display
      "o;j" 'org-clock-goto
      )
    (general-def 'normal doc-view-mode-map
      "j"  'doc-view-next-line-or-next-page
      "k"  'doc-view-previous-line-or-previous-page
      "gg"  'doc-view-first-page
      "G"  'doc-view-last-page
      "C-d" 'doc-view-scroll-up-or-next-page
      "C-f" 'doc-view-scroll-up-or-next-page
      "C-b" 'doc-view-scroll-down-or-previous-page
      )
    (general-def 'normal package-menu-mode-map
      "i"  'package-menu-mark-install
      "U"  'package-menu-mark-upgrades
      "d"  'package-menu-mark-delete
      "u"  'package-menu-mark-unmark
      "x"  'package-menu-execute
      )
    (general-def
      "S-C-i"  'completion-at-point
      )
    (tyrant-def
      "r"  '(:ignore t :which-key "Org Roam")
      "rr" 'org-roam-node-find
      "rc" 'org-roam-capture
      "rn" 'org-roam-buffer-toggle
      "ri" 'org-roam-node-insert
      "ra" 'org-roam-alias-add
      "rd"  '(:ignore t :which-key "Roam Dailies")
      "rdd" 'org-roam-dailies-capture-today
      "rdt" 'org-roam-dailies-capture-tomorrow
      "rdy" 'org-roam-dailies-capture-yesterday
      "rdD" 'org-roam-dailies-goto-today
      "rdT" 'org-roam-dailies-goto-tomorrow
      "rdY" 'org-roam-dailies-goto-yesterday
      "rdn" 'org-roam-dailies-goto-next-note
      "rdp" 'org-roam-dailies-goto-previous-note
      "rt"  '(:ignore t :which-key "Roam Tags")
      "rtt" 'org-roam-tag-add
      "rtd" 'org-roam-tag-remove
      "rtc" 'org-roam-tag-completions
  
      ;; Nutrients
      "n"  '(:ignore t :which-key "Nutrients Map")
      "nf" 'ns/capture-food
      "nr" 'ns/capture-recipe
      "ni" 'ns/capture-ingredient-at-point
      "nI" 'ns/capture-ingredient-in-buffer
      "nm" 'ns/capture-meal
      )
  )
#+end_src
* Org
#+begin_src emacs-lisp
    (use-package org
      :ensure org-plus-contrib
      :pin org
      :custom-face
      (org-ellipsis ((t (:underline nil))))
      (org-ellipsis ((t (:height 90))))
      :config
      (require 'org-habit)
      (add-to-list 'org-modules 'org-habit)
      (setq
       org-habit-graph-column 60
       org-confirm-babel-evaluate nil
       org-image-actual-width nil
       org-ellipsis "  "
       org-agenda-window-setup 'only-window ; Full screeen agenda
       org-agenda-include-diary t
       org-agenda-skip-additional-timestamps-same-entry t
       org-agenda-skip-scheduled-if-done t
       org-agenda-skip-deadline-if-done t
       org-agenda-skip-timestamp-if-done t
       org-log-done 'time
       org-log-into-drawer t
       org-hide-emphasis-markers t
       org-directory "~/Org"
       org-default-notes-file (concat org-directory "/notes.org")
       org-agenda-files (list "~/Org"
			      )
       org-refile-use-outline-path 'file
       org-support-shift-select t
       org-refile-targets
       '((nil :maxlevel . 1)
	 (org-agenda-files :maxlevel . 1))
       org-format-latex-options (plist-put org-format-latex-options :scale 2.0)
       org-enforce-todo-checkbox-dependencies t
       org-agenda-span 30
       org-habit-show-habits-only-for-today nil
       org-archive-location "~/Org/archive.org::* From %s"
       )
      ;; Save Org buffers after refiling!
      (advice-add 'org-refile :after 'org-save-all-org-buffers)
      ;; Comonly Knows Tags
      (setq org-tag-alist
	    '((:startgroup)
	      ;; Put mutually exclusive tags here
	      (:endgroup)
	      ("@errand" . ?E)
	      ("@home" . ?H)
	      ("@work" . ?W)
	      ("agenda" . ?a)
	      ("planning" . ?p)
	      ("publish" . ?P)
	      ("batch" . ?b)
	      ("note" . ?n)
	      ("idea" . ?i)
	      )
	    )
      (setq org-todo-keywords
	    '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
	      (sequence "PROJECT(p/!)" "|" "COMPLETED(c/!)" "ABORTED(a@/!0")
	      (sequence "WAITING(W@/!)" "DELEGATED(D@/!)" "|" "POSTPONE(P@/!)")
	      )
	    )
      :general
      (:keymaps 'org-agenda-mode-map
		"j" 'org-agenda-next-line
		"k" 'org-agenda-previous-line
		"s" 'org-agenda-schedule
		"d" 'org-agenda-deadline
		"i" 'org-clock-in
		"o" 'org-clock-out
		"p" 'org-agenda-set-property
		"x" 'org-agenda-archive
		"n" 'org-agenda-add-note
		)
      )
    (setq org-deadline-warning-days 30)
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    )
  (dolist (face '(
		    (org-level-1 . 1.5)
		    (org-level-2 . 1.1)
		    (org-level-3 . 1.05)
		    (org-level-4 . 1.0)
		    (org-level-5 . 0.9)
		    (org-level-6 . 0.9)
		    (org-level-7 . 0.9)
		    (org-level-8 . 0.9)
		    (org-document-title . 3.0)
		    (org-document-info . 1.0)
		    )
		  )
      (set-face-attribute (car face) nil  :weight 'regular :height (cdr face)
			  )
      )
    (use-package org-autolist
      :config
      (org-autolist-mode)
      )
#+end_src
** Roam
   #+begin_src emacs-lisp
     (use-package org-roam
       :init
       (setq org-roam-v2-ack t)
       :custom
       (org-roam-directory "~/Roam")
       (org-roam-dailies-directory "journals/")
       (org-roam-completion-everywhere t)
       (org-roam-capture-templates
	'(
	  ("d" "default" plain
	   "%?"
	   :if-new (file+head "${slug}.org" "#+title: ${title}\n#+CREATED: %U\n#+LAST_MODIFIED: %U")
	   :unnarrowed t)
	  ))
       :config
       (org-roam-setup)
       )
   #+end_src
** Capture
#+begin_src emacs-lisp
  
  (setq org-capture-templates
	'(
	  ("i" "Inbox" entry (file "~/Org/inbox.org")
	   "* %i%? \n")
  
	  ("e" "Enigma Todo" entry (file+headline "~/Dropbox/EnigmaOrg/Enigma.org" "Inbox")
	   "* TODO  %:subject %i%? \nSCHEDULED: %t \n:PROPERTIES: \n:CREATED: %T \n:END: \n %a ")
	  ("t" "Todo" entry (file+headline "~/Org/inbox.org" "Inbox")
	   "* TODO  %:subject %i%? \nSCHEDULED: %t \n:PROPERTIES: \n:CREATED: %T \n:END: \n %a ")
	  ("j" "Journal" entry (file "~/Org/journal.org")
	   "* TODO %i%? \n:PROPERTIES: \n:CREATED: %U \n:END: \n ")
	  ("p" "Project" entry(file "~/Org/gtd.org")
	   (file "~/.emacs.d/org-templates/project.org"))
	  ("P" "Enigma Project" entry(file "~/Dropbox/EnigmaOrg/Enigma.org")
	   (file "~/.emacs.d/org-templates/project.org"))
	  )
	)
  
  
  ;; SRC: cestlaz.github.io/posts/using-emacs-24-capture-2/
  
  (defadvice org-capture-finalize
      (after delete-capture-frame activate)
    "Advise capture-finalize to close the frame"
    (if (equal "capture" (frame-parameter nil 'name))
	(delete-frame)))
  
  (defadvice org-capture-destroy
      (after delete-capture-frame activate)
    "Advise capture-destroy to close the frame"
    (if (equal "capture" (frame-parameter nil 'name))
	(delete-frame)))
  
  (use-package noflet
    :ensure t )
  (defun make-capture-frame ()
    "Create a new frame and run org-capture."
    (interactive)
    (make-frame '((name . "capture")))
    (select-frame-by-name "capture")
    (delete-other-windows)
    (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
      (org-capture)))
#+end_src
** functions and hooks
#+begin_src emacs-lisp
      ;; (add-hook 'focus-in-hook
      ;; 		(lambda () (progn
      ;; 			     (setq org-tags-column (- 5 (window-body-width)))) (org-align-all-tags)
      ;; 			     )
      ;; 		)
      (defun org-update-cookies-after-save()  ;; Updates all [/] and [%] cookies at save
	(interactive)
	(let ((current-prefix-arg '(4)))
	  (org-update-statistics-cookies "ALL")))
      (add-hook 'org-mode-hook
		(lambda ()
		  (add-hook 'before-save-hook 'org-update-cookies-after-save nil 'make-it-local)))
      (setq org-checkbox-hierarchical-statistics nil)
      
      
      ;; (defun org-summary-todo (n-done n-not-done)
      ;;    "Switch entry to DONE when all subentries are done, to TODO otherwise."
      ;;     (let (org-log-done org-log-states)   ; turn off logging
      ;;       (org-todo (if (= n-not-done 0) "DONE" "TODO"))))
      
      (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
      (add-hook 'org-capture-after-finalize-hook 'org-table-recalculate-buffer-tables)
      (setq org-startup-align-all-tables t)
      
 #+end_src
** org-habit-plus
 #+begin_src emacs-lisp
   ;; ;; Tell emacs where is your personal elisp lib dir
   ;;(add-to-list 'load-path "~/.emacs.d/lisp/")
   ;; ;; load the packaged named xyz.
   ;;(load "org-habit-plus") ;; best not to include the ending “.el” or “.elc”
   ;; (add-to-list 'org-modules 'org-habit)
  ;; (add-to-list 'org-modules 'org-habit-plus)
 #+END_SRC
** Orgtbl Aggreagate
   #+begin_src emacs-lisp
     (use-package orgtbl-aggregate)
   #+end_src
** Org nutrition
   #+begin_src emacs-lisp
     (defun ns/roam-locate-file ()
       (org-roam-node-file (org-roam-node-read)
			   )
       )
     (defun ns/capture-at-point ()
       "Insert an org capture template at point."
       (interactive)
       (org-capture 0)
       )
     (add-to-list 'org-roam-capture-templates
		  '("nf" "Add new food to Roam/food/" plain (file "~/Org/templates/food.org")
		    :if-new (file+head "food/${slug}.org" "#+title: ${title}\n")
		    :unnarrowed t
		    :jump-to-captured t)
		  )
     (defun ns/capture-food ()
       "Capture a new food item in Roam/foods/"
       (interactive)
       (org-roam-capture nil "nf")
       )
     (add-to-list 'org-roam-capture-templates
		  '("nr" "Recipe" plain (file "~/Org/templates/recipe.org")
		    :if-new (file+head "recipes/${slug}.org" "#+title: ${title}\n#+CREATED: %U\n#+LAST_MODIFIED: %U")
		    :unnarrowed t
		    :jump-to-captured t)
		  )
     (defun ns/capture-recipe ()
       "Capture a new recipe in Roam/recipes/"
       (interactive)
       (org-roam-capture nil "nr")
       )
     (defun ns/locate-to-end-of-nth-column (nth)
       "Goes to the end of chosen column"
       (org-table-goto-column nth)
       (re-search-forward "|")
       (point)
       )
     (defun ns/org-capture-ingredient(filePath)
       "Return filePath's file content."
       (with-temp-buffer
	 (insert-file-contents filePath)
	 (re-search-forward "|")
	 (org-table-analyze)
	 (org-table-goto-field
	  (org-table-formula-substitute-names
	   (org-table-formula-handle-first/last-rc "@>$1")
	   )
	  )
	 (buffer-substring-no-properties
	  (line-beginning-position)
	  (ns/locate-to-end-of-nth-column 5)
	  )
	 )
       )
     (add-to-list 'org-capture-templates
		  '("ni" "Add an ingredient" plain (file "~/Org/meals.org")
		    "%(ns/org-capture-ingredient(org-roam-node-file (org-roam-node-read)))%^{Amount}|")
		  )
     (defun ns/capture-ingredient-at-point ()
       "Capture ingredient, at point"
       (interactive)
       (org-capture 0 "ni")
       )
     (defun ns/org-capture-meal(filePath)
       "Return filePath's file content."
       (with-temp-buffer
	 (insert-file-contents filePath)
	 (re-search-forward "|")
	 (org-table-analyze)
	 (org-table-goto-field
	  (org-table-formula-substitute-names
	   (org-table-formula-handle-first/last-rc "@>>$1")
	   )
	  )
	 (buffer-substring-no-properties
	  (line-beginning-position)
	  (ns/locate-to-end-of-nth-column 5)
	  )
	 )
       )
     (add-to-list 'org-capture-templates
		  '("nm" "Add a meal to main table" table-line (file "~/Roam/nutrition.org")
		    "|#|%(org-insert-time-stamp (org-read-date nil t nil)) %(ns/org-capture-meal (org-roam-node-file (org-roam-node-read)))"
		    :table-line-pos "@>>"
		    )
		  )
     (defun ns/capture-meal ()
       "Capture a meal in Roam/nutrition.org"
       (interactive)
       (org-capture nil "nm"))
   #+end_src
    
** TODO Clocking Time
   #+begin_src emacs-lisp
     (setq org-clock-persist 'history)
     (setq org-clock-display-default-range 'thisweek)
     (setq org-clock-report-include-clocking-task t)
     (org-clock-persistence-insinuate)
     (setq org-duration-format 'h:mm)
   #+end_src
** Visual Fill Column
    #+begin_src emacs-lisp
      (defun efs/org-mode-visual-fill ()
	(setq visual-fill-column-width 150
	      visual-fill-column-center-text t)
	(visual-fill-column-mode 1))
      
      (use-package visual-fill-column
	:hook (org-mode . efs/org-mode-visual-fill))
    #+end_src

** Calendar
   #+begin_src emacs-lisp
     (setq diary-file "~/Org/diary")
     (setq calendar-date-style 'iso)
     (setq view-diary-entries-initially t
	   mark-diary-entries-in-calendar t
	   number-of-diary-entries 7)
     (add-hook 'diary-display-hook 'fancy-diary-display)
     (add-hook 'today-visible-calendar-hook 'calendar-mark-today)
   #+end_src
** Custom
* Ivy / Counsel
#+begin_src emacs-lisp
  (use-package ivy
    :general (
	      "C-s" 'swiper
	      )
    :config
    (ivy-mode 1))
  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1)
    )
  (use-package counsel
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1)
    )
#+end_src
* Doom mode line
#+begin_src emacs-lisp
  (use-package all-the-icons) ; run all-the-icons-install-fonts to install the fonts
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    (setq
     doom-modeline-icon (display-graphic-p)
     doom-modeline-height 15
     )
    )
#+end_src

* Which key
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1)
    )
#+end_src

* Helpful
  #+begin_src emacs-lisp
    (use-package helpful
      :init
      ;; Note that the built-in `describe-function' includes both functions
      ;; and macros. `helpful-function' is functions only, so we provide
      ;; `helpful-callable' as a drop-in replacement.
      (global-set-key (kbd "C-h f") #'helpful-callable)

      (global-set-key (kbd "C-h v") #'helpful-variable)
      (global-set-key (kbd "C-h k") #'helpful-key)
      )
  #+end_src

* Magit
#+begin_src emacs-lisp
  (use-package magit)
#+end_src
* Dashboard
  #+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :init
    (setq dashboard-startup-banner 'logo
	  dashboard-show-shortcuts t
	  dashboard-set-heading-icons t
	  dashboard-set-init-info t
	  dashboard-set-file-icons t
	  )
    (setq dashboard-center-content t)
    :config
    (progn
      (dashboard-setup-startup-hook)
      (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
      )
  
    (setq dashboard-items '(
			    (projects . 20)
			    ;; (recents  . 5)
			    ;; (agenda . 20)
			    ;; (bookmarks . 5)
			    ;; (registers . 5)
			    )
	  )
    (setq show-week-agenda-p t)
    )
  ;;(add-to-list 'evil-emacs-state-modes 'dashboard-mode)
  ;; Format: "(icon title help action face prefix suffix)"
  (setq dashboard-navigator-buttons
	`(;; line1
	  ((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
	    "Homepage"
	    "Browse homepage"
	    (lambda (&rest _) (browse-url "homepage")))
	   ("★" "Star" "Show stars" (lambda (&rest _) (show-stars)) warning)
	   ("?" "" "?/h" #'show-help nil "<" ">"))
	  ;; line 2
	  ((,(all-the-icons-faicon "linkedin" :height 1.1 :v-adjust 0.0)
	    "Linkedin"
	    ""
	    (lambda (&rest _) (browse-url "homepage")))
	   ("⚑" nil "Show flags" (lambda (&rest _) (message "flag")) error))))
  (defun dashboard-insert-custom (list-size)
    (insert "Custom text"))
  (add-to-list 'dashboard-item-generators  '(custom . dashboard-insert-custom))
  (add-to-list 'dashboard-items '(custom) t)
#+END_SRC

* Ranger
#+BEGIN_SRC emacs-lisp
    (use-package ranger
      :hook (after-init . ranger-override-dired-mode)
      :general (tyrant-def "R" 'ranger)
      )
#+END_SRC

* Try
  #+begin_src emacs-lisp
    (use-package try)
  #+end_src

* Format-All
#+BEGIN_SRC emacs-lisp
  (use-package format-all
    :general (tyrant-def ";" 'format-all-buffer)
    )
#+END_SRC

* Custom Functions
#+begin_src emacs-lisp
    ;;Taken from http://emacsredux.com/blog/2013/05/04/rename-file-and-buffer/
    (defun rename-file-and-buffer ()
      "Rename the current buffer and file it is visiting."
      (interactive)
      (let ((filename (buffer-file-name)))
	(if (not (and filename (file-exists-p filename)))
	    (message "Buffer is not visiting a file!")
	  (let ((new-name (read-file-name "New name: " filename)))
	    (cond
	     ((vc-backend filename) (vc-rename-file filename new-name))
	     (t
	      (rename-file filename new-name t)
	      (set-visited-file-name new-name t t)))))))
#+end_src
** Matching Parenthesis
   #+begin_src emacs-lisp
     (defun match-paren (arg)
       "Go to the matching paren if on a paren; otherwise insert %."
       (interactive "p")
       (cond ((looking-at "\\s(") (forward-list 1) (backward-char 1))
             ((looking-at "\\s)") (forward-char 1) (backward-list 1))
             (t (self-insert-command (or arg 1)))))
   #+end_src
* Coding
** $PATH
    #+begin_src emacs-lisp
      (add-to-list 'exec-path "/home/negativespace/.node_modules/bin")
    #+end_src
** Company 
#+begin_src emacs-lisp
  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
		("<tab>" . company-complete-selection))
    (:map lsp-mode-map
	  ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)
    )
  
  (use-package company-box
    :hook (company-mode . company-box-mode)
    )
  (setq css-indent-offset 2)
#+end_src
** LSP
#+begin_src emacs-lisp
  (use-package lsp-mode
    ;; :straight t
    :commands lsp

    :hook ((typescript-mode js2-mode web-mode scss-mode css-mode html-mode php-mode) . lsp)
    :bind (:map lsp-mode-map
		("TAB" . completion-at-point))
    :custom (lsp-headerline-breadcrumb-enable nil))
  
  (tyrant-def
    "l"  '(:ignore t :which-key "lsp")
    "ld" 'xref-find-definitions
    "lr" 'xref-find-references
    "ln" 'lsp-ui-find-next-reference
    "lp" 'lsp-ui-find-prev-reference
    "ls" 'counsel-imenu
    "le" 'lsp-ui-flycheck-list
    "lS" 'lsp-ui-sideline-mode
    "lX" 'lsp-execute-code-action)
  
  (use-package lsp-ui
    ;; :straight t
    :hook (lsp-mode . lsp-ui-mode)
    :config
    (setq lsp-ui-sideline-enable t)
    (setq lsp-ui-sideline-show-hover nil)
    (setq lsp-ui-doc-position 'bottom)
    (lsp-ui-doc-show))
#+end_src
** Web Mode
#+begin_src emacs-lisp
  (use-package web-mode
    :mode
    ("\\.erb\\'" . web-mode)
    ("\\.mustache\\'" . web-mode)
    ("\\.html?\\'" . web-mode)
    :config
    (progn
      (setq web-mode-markup-indent-offset 2
	    web-mode-css-indent-offset 2
	    web-mode-code-indent-offset 2)
      )
    )
#+end_src
** php mode
   #+begin_src emacs-lisp
     (use-package php-mode
       :mode
       ("\\.php\\'" . php-mode)
       )
   #+end_src
** MMM mode
     #+begin_src emacs-lisp
       (use-package mmm-mode
	 :init
	 (setq mmm-js-mode-enter-hook (lambda () (setq syntax-ppss-table nil)))
	 (setq mmm-typescript-mode-enter-hook (lambda () (setq syntax-ppss-table nil)))
	 )
     #+end_src
* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :general
    (tyrant-def
      "pm" 'projectile-command-map
      "pa" 'projectile-ag
      "pp" 'counsel-projectile-switch-project
      "pb" 'counsel-projectile-switch-to-buffer
      )
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/Work/")
      (setq projectile-project-search-path '("~/Work/")))
    (setq projectile-switch-project-action #'projectile-dired)
    :config
    (projectile-mode 1)
    )
  (use-package counsel-projectile
    :config (counsel-projectile-mode)
    )
  #+end_src  
* Evil
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq
     evil-want-integration t
     evil-want-keybinding nil
     evil-want-C-u-scroll t
     evil-want-C-i-jump nil
     )
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))
#+end_src
** Evil collection 
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :custom
    (evil-collection-setup-minibuffer t)
    (evil-collection-calendar-want-org-bindings t)
    :init (evil-collection-init)
    )
#+end_src
** Evil nerd commenter
   #+begin_src emacs-lisp
     (use-package evil-nerd-commenter
       :general
       (tyrant-def
	 "/" 'evilnc-comment-or-uncomment-lines
	 )
       )
     
     
   #+end_src
** Evil Surround
   #+begin_src emacs-lisp
     (use-package evil-surround
       :config
       (global-evil-surround-mode 1)
       )
   #+end_src
* Caldav
#+begin_src  emacs-lisp
  (use-package org-caldav
    :init
    ;; This is the sync on close function; it also prompts for save after syncing so
    ;; no late changes get lost
    (defun org-caldav-sync-at-close ()
      (org-caldav-sync)
      (save-some-buffers))
  
    ;; This is the delayed sync function; it waits until emacs has been idle for
    ;; "secs" seconds before syncing.  The delay is important because the caldav-sync
    ;; can take five or ten seconds, which would be painful if it did that right at save.
    ;; This way it just waits until you've been idle for a while to avoid disturbing
    ;; the user.
    (defvar org-caldav-sync-timer nil
      "Timer that `org-caldav-push-timer' used to reschedule itself, or nil.")
    (defun org-caldav-sync-with-delay (secs)
      (when org-caldav-sync-timer
	(cancel-timer org-caldav-sync-timer))
      (setq org-caldav-sync-timer
	    (run-with-idle-timer
	     (* 1 secs) nil 'org-caldav-sync)))
  
    ;; Actual calendar configuration edit this to meet your specific needs
    (setq org-caldav-url "http://dashboard.krystianokaz.com/remote.php/dav/calendars/negativespace/")
    (setq org-caldav-calendars
	  '(
	    (:calendar-id "habits"
			  :files ("~/Org/habits.org")
			  :inbox "~/Org/inbox.org")
	    ;; (:calendar-id "shared_cal1"
	    ;; 		:files ("~/Calendars/shared_cal1.org")
	    ;; 		:inbox "~/Calendars/shared_cal1.org")
	    ;; (:calendar-id "default"
	    ;; 		:files ("~/Calendars/shared_cal2.org")
	    ;; 		:inbox "~/Calendars/shared_cal2.org")
	    )
	  )
    (setq org-caldav-backup-file "~/Org/backup.org")
    (setq org-caldav-save-directory "~/Org/dav")
    :config
    (setq org-icalendar-alarm-time 1)
    ;; This makes sure to-do items as a category can show up on the calendar
    (setq org-icalendar-include-todo t)
    ;; This ensures all org "deadlines" show up, and show up as due dates
    (setq org-icalendar-use-deadline '(event-if-todo event-if-not-todo todo-due))
    ;; This ensures "scheduled" org items show up, and show up as start times
    (setq org-icalendar-use-scheduled '(todo-start event-if-todo event-if-not-todo))
    ;; Add the delayed save hook with a five minute idle timer
    (add-hook 'after-save-hook
	      (lambda ()
		(when (eq major-mode 'org-mode)
		  (org-caldav-sync-with-delay 300))))
    ;; Add the close emacs hook
    (add-hook 'kill-emacs-hook 'org-caldav-sync-at-close))
#+end_src

* Nano
  #+begin_src emacs-lisp
    (use-package nano-modeline
      :init
      (nano-modeline-mode))
    (use-package nano-agenda
      :general (tyrant-def "oA" 'nano-agenda)
      )
    (load-theme  'deeper-blue)
    (use-package nano-theme)
    (setq custom-safe-themes t)   ; Treat all themes as safe
    (load-theme 'nano-dark t)
  #+end_src
  
* Prettify-symbols
#+begin_src emacs-lisp
  (defun ns/org-mode-prettify-symbols ()
    (interactive)
    (setq prettify-symbols-alist
	  (mapcan (lambda (x) (list x (cons (upcase (car x)) (cdr x))))
		  '(
		    ("#+title:" . ?)
		    ("#+author:" . ?)
		    ("#+created:" . ?)
		    ("#+last_modified:" . ?)
		    ("#+filetags" . ?)
		    ("#+tblfm:" . ?)
		    ("#+begin_src" . ?)
		    ("#+end_src" . ?)
		    ("#+begin_example" . ?)
		    ("#+end_example" . ?)
		    ("#+header:" . ?)
		    ("#+name:" . ?﮸)
		    ("#+results:" . ?)
		    ("#+call:" . ?)
		    ("#+begin:" . ?)
		    ("#+caption:" . ?)
		    ("#+end:" . ?)
		    (":properties:" . ?)
		    (":logbook:" . ?)
		    (":id:" . ?)
		    (":end:" . ?)
		    ("emacs-lisp" . ?)
		    ("TODO" . "")
		    ("PROJECT" . "")
		    ("WAIT" . "")
		    ("NOPE" . "")
		    ("DONE" . "")
		    ("[#A]" . "")
		    ("[#B]" . "")
		    ("[#C]" . "")
		    ("[ ]" . "")
		    ("[X]" . "")
		    ("[-]" . "")
		    )
		  )
	  )
    (prettify-symbols-mode +1)
    )
  (add-hook 'org-mode-hook 'ns/org-mode-prettify-symbols)
#+end_src
